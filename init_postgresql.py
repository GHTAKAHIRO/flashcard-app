#!/usr/bin/env python3
"""
PostgreSQL„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÊâãÂãï„ÅßÂàùÊúüÂåñ„Åô„Çã„Çπ„ÇØ„É™„Éó„Éà
"""

import psycopg2
import os
from datetime import datetime
from werkzeug.security import generate_password_hash
from dotenv import load_dotenv

def init_postgresql():
    """PostgreSQL„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÊâãÂãï„ÅßÂàùÊúüÂåñ"""
    load_dotenv(dotenv_path='dbname.env')
    
    # PostgreSQLÊé•Á∂öÊÉÖÂ†±
    db_host = os.getenv('DB_HOST')
    db_port = os.getenv('DB_PORT')
    db_name = os.getenv('DB_NAME')
    db_user = os.getenv('DB_USER')
    db_password = os.getenv('DB_PASSWORD')
    
    if not all([db_host, db_port, db_name, db_user, db_password]):
        print("‚ùå PostgreSQLÊé•Á∂öÊÉÖÂ†±„Åå‰∏çÂÆåÂÖ®„Åß„Åô")
        return False
    
    try:
        # PostgreSQLÊé•Á∂ö
        conn = psycopg2.connect(
            host=db_host,
            port=db_port,
            database=db_name,
            user=db_user,
            password=db_password,
            connect_timeout=10
        )
        cursor = conn.cursor()
        
        print("üîÑ PostgreSQL„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂàùÊúüÂåñ‰∏≠...")
        
        # „ÉÜ„Éº„Éñ„É´‰ΩúÊàê
        tables = [
            # „É¶„Éº„Ç∂„Éº„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(255) UNIQUE NOT NULL,
                full_name VARCHAR(255),
                email VARCHAR(255),
                password_hash TEXT NOT NULL,
                is_admin BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                grade VARCHAR(50) DEFAULT '‰∏ÄËà¨',
                last_login TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # Â≠¶Áøí„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS study_log (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                card_id INTEGER NOT NULL,
                source TEXT NOT NULL,
                stage INTEGER NOT NULL,
                mode TEXT NOT NULL,
                result TEXT NOT NULL,
                page_range TEXT,
                difficulty TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # „ÉÅ„É£„É≥„ÇØÈÄ≤Êçó„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS chunk_progress (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                source TEXT NOT NULL,
                stage INTEGER NOT NULL,
                page_range TEXT NOT NULL,
                difficulty TEXT NOT NULL,
                chunk_number INTEGER NOT NULL,
                is_completed BOOLEAN DEFAULT FALSE,
                is_passed BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # ÁîªÂÉè„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS image (
                id SERIAL PRIMARY KEY,
                source TEXT NOT NULL,
                page_number INTEGER NOT NULL,
                level TEXT,
                image_path TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS user_settings (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                source TEXT NOT NULL,
                page_range TEXT,
                difficulty TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # ÂÖ•ÂäõÂïèÈ°å„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS input_textbooks (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                subject TEXT NOT NULL,
                grade TEXT,
                publisher TEXT,
                description TEXT,
                wasabi_folder_path TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS input_units (
                id SERIAL PRIMARY KEY,
                textbook_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                chapter_number INTEGER,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS input_questions (
                id SERIAL PRIMARY KEY,
                subject TEXT NOT NULL,
                textbook_id INTEGER NOT NULL,
                unit_id INTEGER,
                question TEXT NOT NULL,
                correct_answer TEXT NOT NULL,
                acceptable_answers TEXT,
                answer_suffix TEXT,
                explanation TEXT,
                difficulty_level TEXT,
                image_name TEXT,
                image_url TEXT,
                image_title TEXT,
                question_number INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # ÂÖ•ÂäõÂïèÈ°åÂ≠¶Áøí„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS input_study_log (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                user_answer TEXT,
                is_correct BOOLEAN,
                subject TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # ÈÅ∏ÊäûÂïèÈ°å„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS choice_textbooks (
                id SERIAL PRIMARY KEY,
                source TEXT NOT NULL,
                chapter_name TEXT NOT NULL,
                chapter_number INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS choice_units (
                id SERIAL PRIMARY KEY,
                textbook_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                unit_number INTEGER NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS choice_questions (
                id SERIAL PRIMARY KEY,
                unit_id INTEGER NOT NULL,
                question TEXT NOT NULL,
                correct_answer TEXT NOT NULL,
                choices TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS choice_study_log (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                user_answer TEXT,
                correct_answer TEXT,
                is_correct BOOLEAN NOT NULL,
                answered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # Áµ±‰∏Ä„Åï„Çå„ÅüÊïôÊùê„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS textbooks (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                subject TEXT NOT NULL,
                grade TEXT,
                publisher TEXT,
                description TEXT,
                study_type TEXT DEFAULT 'both',
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS units (
                id SERIAL PRIMARY KEY,
                textbook_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                unit_number INTEGER NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            '''CREATE TABLE IF NOT EXISTS questions (
                id SERIAL PRIMARY KEY,
                unit_id INTEGER NOT NULL,
                question TEXT NOT NULL,
                correct_answer TEXT NOT NULL,
                choices TEXT,
                acceptable_answers TEXT,
                answer_suffix TEXT,
                explanation TEXT,
                difficulty_level TEXT,
                image_name TEXT,
                image_url TEXT,
                image_title TEXT,
                question_number INTEGER,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # Â≠¶Áøí„Çª„ÉÉ„Ç∑„Éß„É≥„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS study_sessions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                textbook_id INTEGER NOT NULL,
                unit_id INTEGER,
                study_type TEXT NOT NULL,
                progress REAL DEFAULT 0.0,
                completed BOOLEAN DEFAULT FALSE,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # Áµ±‰∏Ä„Åï„Çå„ÅüÂ≠¶Áøí„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS study_logs (
                id SERIAL PRIMARY KEY,
                session_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                user_answer TEXT,
                correct_answer TEXT,
                is_correct BOOLEAN NOT NULL,
                study_type TEXT NOT NULL,
                response_time INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''',
            
            # ÊïôÊùêÂâ≤„ÇäÂΩì„Å¶„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS textbook_assignments (
                id SERIAL PRIMARY KEY,
                user_id INTEGER NOT NULL,
                textbook_id INTEGER NOT NULL,
                study_type TEXT DEFAULT 'both',
                units TEXT,
                chunks TEXT,
                is_active BOOLEAN DEFAULT TRUE,
                assigned_by INTEGER NOT NULL,
                assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP
            )''',
            
            # ÊïôÊùêÂâ≤„ÇäÂΩì„Å¶Ë©≥Á¥∞„ÉÜ„Éº„Éñ„É´
            '''CREATE TABLE IF NOT EXISTS assignment_details (
                id SERIAL PRIMARY KEY,
                assignment_id INTEGER NOT NULL,
                unit_id INTEGER,
                chunk_start INTEGER,
                chunk_end INTEGER,
                difficulty_level TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )'''
        ]
        
        # „ÉÜ„Éº„Éñ„É´‰ΩúÊàê
        for i, table_sql in enumerate(tables, 1):
            try:
                cursor.execute(table_sql)
                print(f"‚úÖ „ÉÜ„Éº„Éñ„É´ {i}/{len(tables)} ‰ΩúÊàêÂÆå‰∫Ü")
            except Exception as e:
                print(f"‚ùå „ÉÜ„Éº„Éñ„É´ {i}/{len(tables)} ‰ΩúÊàê„Ç®„É©„Éº: {e}")
        
        # „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàê
        indexes = [
            "CREATE INDEX IF NOT EXISTS idx_study_log_user_stage_mode ON study_log(user_id, stage, mode);",
            "CREATE INDEX IF NOT EXISTS idx_study_log_composite ON study_log(user_id, stage, mode, card_id, id DESC);",
            "CREATE INDEX IF NOT EXISTS idx_image_source_page ON image(source, page_number);",
            "CREATE INDEX IF NOT EXISTS idx_image_source_level ON image(source, level);",
            "CREATE INDEX IF NOT EXISTS idx_chunk_progress_user_source_stage ON chunk_progress(user_id, source, stage);",
            "CREATE INDEX IF NOT EXISTS idx_study_log_card_result ON study_log(card_id, result, id DESC);",
            "CREATE INDEX IF NOT EXISTS idx_user_settings_user_source ON user_settings(user_id, source);",
            "CREATE INDEX IF NOT EXISTS idx_questions_textbook_unit ON input_questions(textbook_id, unit_id);",
            "CREATE INDEX IF NOT EXISTS idx_choice_units_textbook ON choice_units(textbook_id, unit_number);",
            "CREATE INDEX IF NOT EXISTS idx_choice_questions_unit ON choice_questions(unit_id);",
            "CREATE INDEX IF NOT EXISTS idx_choice_study_log_user_question ON choice_study_log(user_id, question_id);",
            "CREATE INDEX IF NOT EXISTS idx_choice_study_log_user ON choice_study_log(user_id, answered_at);"
        ]
        
        print("\nüîÑ „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Çí‰ΩúÊàê‰∏≠...")
        for i, index_sql in enumerate(indexes, 1):
            try:
                cursor.execute(index_sql)
                print(f"‚úÖ „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ {i}/{len(indexes)} ‰ΩúÊàêÂÆå‰∫Ü")
            except Exception as e:
                print(f"‚ùå „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ {i}/{len(indexes)} ‰ΩúÊàê„Ç®„É©„Éº: {e}")
        
        # ÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
        print("\nüë§ ÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê‰∏≠...")
        admin_password_hash = generate_password_hash('admin123')
        cursor.execute('''
            INSERT INTO users (username, email, password_hash, is_admin, full_name, created_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT (username) DO NOTHING
        ''', ('admin', 'admin@example.com', admin_password_hash, True, 'ÁÆ°ÁêÜËÄÖ', datetime.now()))
        
        # ÂàùÊúü„Éá„Éº„Çø„Çí‰ΩúÊàê
        print("\nüìö ÂàùÊúü„Éá„Éº„Çø„Çí‰ΩúÊàê‰∏≠...")
        
        # ÂàùÊúüÊïôÊùê„Çí‰ΩúÊàê
        cursor.execute('''
            INSERT INTO input_textbooks (name, subject, grade, publisher, description, created_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON CONFLICT DO NOTHING
            RETURNING id
        ''', ('„Éï„Ç°„Ç§„Éä„É´„Çπ„ÉÜ„Éº„Ç∏', 'Âú∞ÁêÜ', 'È´òÊ†°', 'Âá∫ÁâàÁ§æÂêç', 'Âú∞ÁêÜ„ÅÆÁ∑èÂêàÂïèÈ°åÈõÜ', datetime.now()))
        
        result = cursor.fetchone()
        if result:
            textbook_id = result[0]
            print(f"‚úÖ ÂàùÊúüÊïôÊùê„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü: ID={textbook_id}")
            
            # ÂàùÊúüÂçòÂÖÉ„Çí‰ΩúÊàê
            units = [
                ('Êó•Êú¨„ÅÆËá™ÁÑ∂Áí∞Â¢É', 1, 'Êó•Êú¨„ÅÆÂú∞ÂΩ¢„ÉªÊ∞óÂÄô„ÉªËá™ÁÑ∂ÁÅΩÂÆ≥„Å´„Å§„ÅÑ„Å¶'),
                ('Êó•Êú¨„ÅÆÁî£Ê•≠', 2, 'Êó•Êú¨„ÅÆËæ≤Ê•≠„ÉªÂ∑•Ê•≠„Éª„Çµ„Éº„Éì„ÇπÊ•≠„Å´„Å§„ÅÑ„Å¶'),
                ('Êó•Êú¨„ÅÆ‰∫∫Âè£„ÉªÈÉΩÂ∏Ç', 3, 'Êó•Êú¨„ÅÆ‰∫∫Âè£ÂãïÊÖã„Å®ÈÉΩÂ∏ÇÂïèÈ°å„Å´„Å§„ÅÑ„Å¶'),
                ('‰∏ñÁïå„ÅÆËá™ÁÑ∂Áí∞Â¢É', 4, '‰∏ñÁïå„ÅÆÂú∞ÂΩ¢„ÉªÊ∞óÂÄô„ÉªËá™ÁÑ∂Áí∞Â¢É„Å´„Å§„ÅÑ„Å¶'),
                ('‰∏ñÁïå„ÅÆÁî£Ê•≠„ÉªÁµåÊ∏à', 5, '‰∏ñÁïå„ÅÆÁî£Ê•≠ÊßãÈÄ†„Å®ÁµåÊ∏à„Å´„Å§„ÅÑ„Å¶')
            ]
            
            for unit_name, chapter_num, description in units:
                cursor.execute('''
                    INSERT INTO input_units (textbook_id, name, chapter_number, description, created_at)
                    VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT DO NOTHING
                ''', (textbook_id, unit_name, chapter_num, description, datetime.now()))
            
            print(f"‚úÖ {len(units)}ÂÄã„ÅÆÂàùÊúüÂçòÂÖÉ„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü")
            
            # „Çµ„É≥„Éó„É´ÂïèÈ°å„Çí‰ΩúÊàê
            sample_questions = [
                ('Êó•Êú¨„ÅÆÊúÄÈ´òÂ≥∞„ÅØÔºü', 'ÂØåÂ£´Â±±', 'Êó•Êú¨‰∏ÄÈ´ò„ÅÑÂ±±„ÅØÂØåÂ£´Â±±„Åß„Åô„ÄÇ', 'basic'),
                ('Êó•Êú¨„ÅÆÈ¶ñÈÉΩ„ÅØÔºü', 'Êù±‰∫¨', 'Êó•Êú¨„ÅÆÈ¶ñÈÉΩ„ÅØÊù±‰∫¨„Åß„Åô„ÄÇ', 'basic'),
                ('Êó•Êú¨„ÅßÊúÄ„ÇÇ‰∫∫Âè£„ÅåÂ§ö„ÅÑÈÉΩÈÅìÂ∫úÁúå„ÅØÔºü', 'Êù±‰∫¨ÈÉΩ', 'Êù±‰∫¨ÈÉΩ„ÅåÊúÄ„ÇÇ‰∫∫Âè£„ÅåÂ§ö„ÅÑ„Åß„Åô„ÄÇ', 'normal'),
                ('Êó•Êú¨„ÅÆÊ∞óÂÄôÂå∫ÂàÜ„ÅßÊúÄ„ÇÇÂ§ö„ÅÑ„ÅÆ„ÅØÔºü', 'Ê∏©Â∏Ø', 'Êó•Êú¨„ÅØÊ∏©Â∏ØÊ∞óÂÄô„ÅåÊúÄ„ÇÇÂ∫É„ÅèÂàÜÂ∏É„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ', 'normal'),
                ('Êó•Êú¨„ÅÆ‰∏ªË¶Å„Å™Áî£Ê•≠„ÅØÔºü', 'Ëá™ÂãïËªäÁî£Ê•≠', 'Ëá™ÂãïËªäÁî£Ê•≠„ÅØÊó•Êú¨„ÅÆ‰∏ªË¶Å„Å™Áî£Ê•≠„ÅÆ‰∏Ä„Å§„Åß„Åô„ÄÇ', 'advanced')
            ]
            
            for question, answer, explanation, difficulty in sample_questions:
                cursor.execute('''
                    INSERT INTO input_questions 
                    (subject, textbook_id, question, correct_answer, explanation, difficulty_level, created_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    ON CONFLICT DO NOTHING
                ''', ('Âú∞ÁêÜ', textbook_id, question, answer, explanation, difficulty, datetime.now()))
            
            print(f"‚úÖ {len(sample_questions)}ÂÄã„ÅÆ„Çµ„É≥„Éó„É´ÂïèÈ°å„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü")
        
        conn.commit()
        print("\nüéâ PostgreSQL„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÂÆå‰∫Ü")
        
        # Áµ±Ë®àÊÉÖÂ†±„ÇíË°®Á§∫
        cursor.execute('SELECT COUNT(*) FROM users')
        user_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM input_textbooks')
        textbook_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM input_units')
        unit_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM input_questions')
        question_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM study_log')
        study_log_count = cursor.fetchone()[0]
        
        print(f"\nüìä ÂàùÊúüÂåñÂæå„ÅÆ„Éá„Éº„ÇøÁµ±Ë®à:")
        print(f"   „É¶„Éº„Ç∂„ÉºÊï∞: {user_count}")
        print(f"   ÊïôÊùêÊï∞: {textbook_count}")
        print(f"   ÂçòÂÖÉÊï∞: {unit_count}")
        print(f"   ÂïèÈ°åÊï∞: {question_count}")
        print(f"   Â≠¶Áøí„É≠„Ç∞Êï∞: {study_log_count}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå PostgreSQLÂàùÊúüÂåñ„Ç®„É©„Éº: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        return False

if __name__ == '__main__':
    init_postgresql() 